#!/usr/bin/env bash

# Exit build script on first failure.
set -e

# Exit on unset variable.
set -u

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
       local var="$1"
       local fileVar="${var}_FILE"
       local def="${2:-}"
       local varValue=$(env | grep -E "^${var}=" | sed -E -e "s/^${var}=//")
       local fileVarValue=$(env | grep -E "^${fileVar}=" | sed -E -e "s/^${fileVar}=//")
       if [ -n "${varValue}" ] && [ -n "${fileVarValue}" ]; then
               echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
               exit 1
       fi
       if [ -n "${varValue}" ]; then
               export "$var"="${varValue}"
       elif [ -n "${fileVarValue}" ]; then
               export "$var"="$(cat "${fileVarValue}")"
       elif [ -n "${def}" ]; then
               export "$var"="$def"
       fi
       unset "$fileVar"
}

file_env PS_SHARED_SECRET

PS_ARGS="$*"
readonly PS_ARGS

# Parse the -db flag to PicoShare since we need to know it before passing it
# along.
while [ "$#" -gt 0 ]; do
  case "$1" in
    -db) DB_PATH="$2"; shift 2;;
    -db=*) DB_PATH="${1#*=}"; shift 1;;
    *) shift 1;;
  esac
done
readonly DB_PATH
# We need to export DB_PATH because litestream.yml references it.
export DB_PATH

is_litestream_enabled() {
  set +ux

  local IS_ENABLED='false'

  if [[ -n "${LITESTREAM_BUCKET}" ]]; then
    IS_ENABLED='true';
  fi

  set -ux

  echo "${IS_ENABLED}"
}

IS_LITESTREAM_ENABLED="$(is_litestream_enabled)"
readonly IS_LITESTREAM_ENABLED

# Echo commands to stdout.
set -x

PS_LAUNCH_CMD="/app/picoshare ${PS_ARGS}"

if [[ "${IS_LITESTREAM_ENABLED}" == 'true' ]]; then
  /app/litestream version
  echo "LITESTREAM_BUCKET=${LITESTREAM_BUCKET}"
  echo "LITESTREAM_ENDPOINT=${LITESTREAM_ENDPOINT}"
  echo "LITESTREAM_RETENTION=${LITESTREAM_RETENTION}"

  if [[ -f "$DB_PATH" ]]; then
    echo "Existing database is $(stat -c %s "${DB_PATH}") bytes"
  else
    echo "No existing database found"
    # Restore database from remote storage.
    /app/litestream restore -if-replica-exists "${DB_PATH}"
  fi

  # Let Litestream start PicoShare as a child process
  exec /app/litestream replicate -exec "$PS_LAUNCH_CMD"
else
  echo "Starting without litestream"
  eval "exec ${PS_LAUNCH_CMD}"
fi
